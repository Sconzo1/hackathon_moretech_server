# Generated by Django 3.2.7 on 2021-10-09 15:11

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Difficulty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Сложность',
                'verbose_name_plural': 'Сложности',
                'db_table': 'difficulties',
            },
        ),
        migrations.CreateModel(
            name='GameType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тип игры',
                'verbose_name_plural': 'Типы игр',
                'db_table': 'game_types',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_optional', models.BooleanField(default=False, verbose_name='Опционально?')),
                ('id_content', models.ForeignKey(db_column='id_content', on_delete=django.db.models.deletion.CASCADE, to='api.content', verbose_name='Контент')),
                ('id_difficulty', models.ForeignKey(db_column='id_difficulty', on_delete=django.db.models.deletion.CASCADE, to='api.difficulty', verbose_name='Сложность')),
            ],
            options={
                'verbose_name': 'Уровень',
                'verbose_name_plural': 'Уровни',
                'db_table': 'levels',
            },
        ),
        migrations.CreateModel(
            name='LevelStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Статус уровня',
                'verbose_name_plural': 'Статусы уровня',
                'db_table': 'level_statuses',
            },
        ),
        migrations.CreateModel(
            name='MaritalStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Семейное положение',
                'verbose_name_plural': 'Семейные положения',
                'db_table': 'marital_statuses',
            },
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('max_count_shards', models.PositiveSmallIntegerField(verbose_name='Макс. кол-во шардов')),
                ('color', models.CharField(max_length=7, verbose_name='Цвет HEX')),
            ],
            options={
                'verbose_name': 'Редкость',
                'verbose_name_plural': 'Редкости',
                'db_table': 'rarities',
            },
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Пол',
                'verbose_name_plural': 'Пол',
                'db_table': 'sex',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('max_value', models.PositiveSmallIntegerField(verbose_name='Макс. уровень')),
            ],
            options={
                'verbose_name': 'Навык',
                'verbose_name_plural': 'Навыки',
                'db_table': 'skills',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('company_name', models.CharField(max_length=200, verbose_name='Название компании')),
                ('id_rarity', models.ForeignKey(db_column='id_rarity', on_delete=django.db.models.deletion.CASCADE, to='api.rarity', verbose_name='Редкость')),
            ],
            options={
                'verbose_name': 'Акция',
                'verbose_name_plural': 'Акции',
                'db_table': 'stocks',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Theory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('id_content', models.OneToOneField(db_column='id_content', on_delete=django.db.models.deletion.CASCADE, to='api.content')),
            ],
            options={
                'verbose_name': 'Раздел теории',
                'verbose_name_plural': 'Разделы теории',
                'db_table': 'theory',
            },
        ),
        migrations.CreateModel(
            name='TheoryDatum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('src', models.CharField(max_length=200, verbose_name='Изображение')),
                ('body', models.TextField(verbose_name='Текст')),
                ('id_theory', models.ForeignKey(db_column='id_theory', on_delete=django.db.models.deletion.CASCADE, to='api.theory', verbose_name='Раздел теории')),
            ],
            options={
                'verbose_name': 'Единица теории',
                'verbose_name_plural': 'Единицы теории',
                'db_table': 'theory_data',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('age', models.PositiveSmallIntegerField(verbose_name='Возраст')),
                ('id_marital_status', models.ForeignKey(db_column='id_marital_status', on_delete=django.db.models.deletion.CASCADE, to='api.maritalstatus', verbose_name='Семейное положение')),
                ('id_sex', models.ForeignKey(db_column='id_sex', on_delete=django.db.models.deletion.CASCADE, to='api.sex', verbose_name='Пол')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserTheoryReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(verbose_name='Прирост навыка')),
                ('created_at', models.DateField(auto_now=True, verbose_name='Время получения')),
                ('id_skill', models.ForeignKey(db_column='id_skill', on_delete=django.db.models.deletion.CASCADE, to='api.skill', verbose_name='Навык')),
                ('id_user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь-Награда обучения',
                'verbose_name_plural': 'Пользователи-Награды обучения',
                'db_table': 'user_theory_rewards',
            },
        ),
        migrations.CreateModel(
            name='UserMiniGameReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_shards', models.PositiveSmallIntegerField(verbose_name='Кол-во шардов')),
                ('created_at', models.DateField(auto_now=True, verbose_name='Время получения')),
                ('id_stock', models.ForeignKey(db_column='id_stock', on_delete=django.db.models.deletion.CASCADE, to='api.stock', verbose_name='Акция')),
                ('id_user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь-Награда игры',
                'verbose_name_plural': 'Пользователи-Награды игры',
                'db_table': 'user_minigame_rewards',
            },
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_errors', models.PositiveSmallIntegerField(default=0, verbose_name='Кол-во ошибок')),
                ('active_time', models.PositiveIntegerField(default=0, verbose_name='Кол-во потраченных секунд')),
                ('id_level', models.ForeignKey(db_column='id_level', on_delete=django.db.models.deletion.CASCADE, to='api.level', verbose_name='Уровень')),
                ('id_status', models.ForeignKey(db_column='id_status', on_delete=django.db.models.deletion.CASCADE, to='api.levelstatus', verbose_name='Статус')),
                ('id_user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь-Уровень',
                'verbose_name_plural': 'Пользователи-Уровни',
                'db_table': 'user_levels',
            },
        ),
        migrations.CreateModel(
            name='TheoryDatumTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_tag', models.ForeignKey(db_column='id_tag', on_delete=django.db.models.deletion.CASCADE, to='api.tag', verbose_name='Тег')),
                ('id_theory_datum', models.ForeignKey(db_column='id_theory_datum', on_delete=django.db.models.deletion.CASCADE, to='api.theorydatum', verbose_name='Единица теории')),
            ],
            options={
                'verbose_name': 'Уровень-Тег',
                'verbose_name_plural': 'Уровни-Теги',
                'db_table': 'theory_datum_tags',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('id_difficulty', models.ForeignKey(db_column='id_difficulty', on_delete=django.db.models.deletion.CASCADE, to='api.difficulty', verbose_name='Сложность')),
            ],
            options={
                'verbose_name': 'Тема',
                'verbose_name_plural': 'Темы',
                'db_table': 'themes',
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.PositiveSmallIntegerField(verbose_name='Порядковый номер')),
                ('id_theme', models.ForeignKey(db_column='id_theme', on_delete=django.db.models.deletion.CASCADE, to='api.theme', verbose_name='Тема')),
                ('id_user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.CASCADE, to='api.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Маршрут',
                'verbose_name_plural': 'Маршруты',
                'db_table': 'routes',
            },
        ),
        migrations.CreateModel(
            name='MiniGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('src', models.CharField(max_length=200, verbose_name='Изображение')),
                ('body', models.TextField(verbose_name='Текст')),
                ('right_answer', models.CharField(max_length=200, verbose_name='Правильный ответ')),
                ('other_answers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), size=None, verbose_name='Неправильные ответы')),
                ('src_right', models.CharField(max_length=200, verbose_name='Изображение при правильном ответе')),
                ('body_right', models.TextField(verbose_name='Текст при правильном ответе')),
                ('src_wrong', models.CharField(max_length=200, verbose_name='Изображение при неправильном ответе')),
                ('body_wrong', models.TextField(verbose_name='Текст при неправильном ответе')),
                ('id_content', models.OneToOneField(db_column='id_content', on_delete=django.db.models.deletion.CASCADE, to='api.content')),
                ('id_type_game', models.ForeignKey(db_column='id_type_game', on_delete=django.db.models.deletion.CASCADE, to='api.gametype', verbose_name='Тип игры')),
            ],
            options={
                'verbose_name': 'Мини-игра',
                'verbose_name_plural': 'Мини-игры',
                'db_table': 'minigames',
            },
        ),
        migrations.CreateModel(
            name='LevelTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_level', models.ForeignKey(db_column='id_level', on_delete=django.db.models.deletion.CASCADE, to='api.level', verbose_name='Уровень')),
                ('id_tag', models.ForeignKey(db_column='id_tag', on_delete=django.db.models.deletion.CASCADE, to='api.tag', verbose_name='Тег')),
            ],
            options={
                'verbose_name': 'Уровень-Тег',
                'verbose_name_plural': 'Уровни-Теги',
                'db_table': 'level_tags',
            },
        ),
        migrations.AddField(
            model_name='level',
            name='id_theme',
            field=models.ForeignKey(db_column='id_theme', on_delete=django.db.models.deletion.CASCADE, to='api.theme', verbose_name='Тема'),
        ),
    ]
